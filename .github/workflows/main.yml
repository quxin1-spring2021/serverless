# This is a basic workflow to help you get started with Actions

name: Deploy Lambda Function

env:
  ARTIFACT_NAME: csye6225-lambda-${{ github.sha }}.zip
  AWS_REGION: us-west-2
  CODEDEPLOY_APPLICATION_NAME: csye6225-lambda
  CODEDEPLOY_APPLICATION_DEPLOYMENT_GROUP_NAME: csye6225-lambda-deployment

# Controls when the action will run. 
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      - name: Configure AWS crednetials
        uses: aws-actions/configure-aws-credentials@v1
        with: 
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
          
      # Runs a set of commands using the runners shell
      # - name: Run a multi-line script
      #   run: |
      #     zip function.zip index.js
      #     aws lambda update-function-code \
      #     --function-name  lambda_sns_function \
      #     --zip-file fileb://function.zip

      - name: Build Artifact
        run: |
          cd ..
          pwd
          ls -al
          mkdir codedeploy_artifact
          zip -r ${{ env.ARTIFACT_NAME }} serverless
          pwd
          ls -al
          mv ${{ env.ARTIFACT_NAME }} codedeploy_artifact/
          pwd
          ls -al
          cd codedeploy_artifact
          pwd
          ls -al
          cd ..
          pwd
          ls -al
          echo Add other actions to build,
          echo test, and deploy your project.
      # aws deploy push \
      #   --application-name ${{ env.CODEDEPLOY_APPLICATION_NAME }} \
      #   --description "This is a revision for the lambda function" \
      #   --ignore-hidden-files \
      #   --s3-location s3://${{ secrets.S3_CODEDEPLOY_BUCKET }}/${{ env.ARTIFACT_NAME }} \
      #   --source .

      
      - name: Copy Artifact to S3
        run: |
          pwd
          aws s3 sync ../codedeploy_artifact s3://${{ secrets.S3_CODEDEPLOY_BUCKET }}

      # - name: CodeDeploy Deploy API Call
      #   run: |
      #     output=$(aws deploy create-deployment \
      #       --application-name ${{ env.CODEDEPLOY_APPLICATION_NAME }} \
      #       --deployment-config-name CodeDeployDefault.AllAtOnce \
      #       --deployment-group-name ${{ env.CODEDEPLOY_APPLICATION_DEPLOYMENT_GROUP_NAME }} \
      #       --ignore-application-stop-failures \
      #       --s3-location bucket=${{ secrets.S3_CODEDEPLOY_BUCKET }},key=${{ env.ARTIFACT_NAME }},bundleType=zip \
      #       --region ${{ env.AWS_REGION }} \
      #       --description "Ignore ApplicationStop failures due to broken script" --output json)
      #     echo $output
      #     dId=$(echo $output | jq -r '.deploymentId')
      #     aws deploy wait deployment-successful --deployment-id $dId