# This is a basic workflow to help you get started with Actions

name: Deploy Lambda Function

env:
  ARTIFACT_NAME: csye6225-lambda-${{ github.sha }}.yml
  AWS_REGION: us-west-2
  CODEDEPLOY_APPLICATION_NAME: csye6225-lambda
  CODEDEPLOY_APPLICATION_DEPLOYMENT_GROUP_NAME: csye6225-lambda-deployment

# Controls when the action will run. 
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main, dev ]
  pull_request:
    branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      - name: Configure AWS crednetials
        uses: aws-actions/configure-aws-credentials@v1
        with: 
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
          
      - name: Get Current Version of Alias
        run: |
          output=$(aws lambda list-aliases \
              --function-name lambda_sns_function --output json)
          echo $output
          curVer=$(echo $output | jq -r '.Aliases[0].FunctionVersion')
          echo "CurVer=$curVer" >> $GITHUB_ENV

          echo $CurVer

      # Runs a set of commands using the runners shell
      - name: Run a multi-line script
        run: |
          echo //version - ${{ github.sha }} >> index.js
          zip function.zip index.js
          aws lambda update-function-code \
          --function-name  lambda_sns_function \
          --zip-file fileb://function.zip

          output=$(aws lambda publish-version \
          --function-name lambda_sns_function --output json)
          newVer=$(echo $output | jq -r '.Version')
          echo "NewVer=$newVer" >> $GITHUB_ENV
          echo $CurVer
          echo $NewVer

      - name: Copy Artifact to S3
        run: |
          pwd
          cd ..
          pwd
          ls -al
          mkdir codedeploy_artifact
          cd codedeploy_artifact
          cat > ${{ env.ARTIFACT_NAME }} <<- EOM
          version: 0.0
          # In the Resources section specify the name, alias, 
          # target version, and (optional) the current version of your AWS Lambda function. 
          Resources:
            - MyFunction: # Replace "MyFunction" with the name of your Lambda function 
                Type: AWS::Lambda::Function
                Properties:
                  Name: "" # Specify the name of your Lambda function
                  Alias: "" # Specify the alias for your Lambda function
                  CurrentVersion: "" # Specify the current version of your Lambda function
                  TargetVersion: "" # Specify the version of your Lambda function to deploy
          # (Optional) In the Hooks section, specify a validation Lambda function to run during 
          # a lifecycle event. Replace "LifeCycleEvent" with BeforeAllowTraffic
          # or AfterAllowTraffic. 
          EOM
          
          cat ${{ env.ARTIFACT_NAME }}
          pwd

      - name: Copy Artifact to S3
        run: |
          pwd
          aws s3 sync ../codedeploy_artifact s3://${{ secrets.S3_CODEDEPLOY_BUCKET }}

      # aws deploy push \
      #   --application-name ${{ env.CODEDEPLOY_APPLICATION_NAME }} \
      #   --description "This is a revision for the lambda function" \
      #   --ignore-hidden-files \
      #   --s3-location s3://${{ secrets.S3_CODEDEPLOY_BUCKET }}/${{ env.ARTIFACT_NAME }} \
      #   --source ..




      - name: CodeDeploy Deploy API Call
        run: |
          REVISION=revisionType=S3,s3Location={bucket=${{ secrets.S3_CODEDEPLOY_BUCKET }},key=${{ env.ARTIFACT_NAME }},bundleType=YAML,}
          output=$(aws deploy create-deployment \
            --application-name ${{ env.CODEDEPLOY_APPLICATION_NAME }} \
            --deployment-config-name CodeDeployDefault.LambdaAllAtOnce \
            --deployment-group-name ${{ env.CODEDEPLOY_APPLICATION_DEPLOYMENT_GROUP_NAME }} \
            --s3-location bucket=${{ secrets.S3_CODEDEPLOY_BUCKET}},bundleType=YAML,key=${{ env.ARTIFACT_NAME }} \
            --description "Ignore ApplicationStop failures due to broken script" --output json)
          echo $output
          dId=$(echo $output | jq -r '.deploymentId')
          aws deploy wait deployment-successful --deployment-id $dId

